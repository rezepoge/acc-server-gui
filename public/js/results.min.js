"use strict";(()=>{const resultElems=Array.from(document.getElementsByClassName("result")),timetable=document.getElementById("timetable");function renderTimetable(ev,elem,index){elem.classList.add("active"),resultElems.forEach(elem2=>{elem!==elem2&&elem2.classList.remove("active")});let timetableHtml='<div class="timeTableLine_header">\n        <div class="driver">\n            Driver\n        </div>\n        <div class="car">\n            Car\n        </div>\n        <div class="timing">\n            <div>Best</div>\n            <div>Last</div>\n            <div>Avg</div>\n            <div>Total</div>\n        </div>\n    </div>';const eventResults=results[index];eventResults.sessionResult.leaderBoardLines.forEach((line,position)=>{const lapsByCar=getLapsByCar(eventResults.laps,line.car.carId),avgLap=getAvgLapTime(lapsByCar,line);timetableHtml+=`<div class="timeTableLine${line.timing.totalTime<=line.timing.bestLap?" noValidLap":""}" data-carId="${line.car.carId}" data-position="${position}">\n                <div class="driver">\n                    <div class="position">${position+1}</div>\n                    <div class="shortName" title="${line.currentDriver.firstName} ${line.currentDriver.lastName}">${line.currentDriver.shortName}</div>\n                </div>\n                <div class="car">\n                    <div class="raceNumber">${line.car.raceNumber}</div>\n                    <div class="carModel">${basics.cars.find(car=>car.id===line.car.carModel).name}</div>\n                </div>\n                <div class="timing">\n                    <div class="${0===position?" bestLapAll":"bestLap"}" title="Best laptime">${getTime(line.timing.bestLap)}</div>\n                    <div class="lastLap${line.timing.bestLap===line.timing.lastLap?" bestLap":""}" title="Last laptime">${getTime(line.timing.lastLap)}</div>\n                    <div class="avgLap" title="Average laptime">${getTime(avgLap)}</div>\n                    <div class="totalTime" title="Total time">${getTime(line.timing.totalTime)}</div>\n                </div>\n            </div>`}),timetable.innerHTML=timetableHtml.trim(),Array.from(timetable.querySelectorAll(".timeTableLine:not(.noValidLap)")).forEach(elem=>elem.addEventListener("click",ev=>renderLaps(ev,elem,index,timetable))),timetable.scrollIntoView({behavior:"smooth"})}function renderLaps(ev,elem,index,timetable){const carId=parseInt(elem.getAttribute("data-carId")),position=parseInt(elem.getAttribute("data-position")),oldLapsElem=document.querySelector(`#laps_${carId}.laps`);if(oldLapsElem)return void oldLapsElem.remove();const lapsElem=document.createElement("div");lapsElem.className="laps",lapsElem.id="laps_"+carId;let lapTableHtml='<div class="lapTableLine_header">\n        <div>\n            Lap\n        </div>\n        <div>\n            Laptime\n        </div>\n        <div class="splits">\n            <div>S1</div>\n            <div>S2</div>\n            <div>S3</div>\n        </div>\n    </div>';const eventResults=results[index],lapsByCar=getLapsByCar(eventResults.laps,carId),bestLap=eventResults.sessionResult.leaderBoardLines[position].timing.bestLap,bestLapAll=getBestLapOfAllDrivers(eventResults.laps),bestSplits=getBestSplits(lapsByCar,eventResults.laps);lapsByCar.forEach((lap,number)=>{const laptimeAddClass=getBestAddClass(lap.laptime,bestLap,bestLapAll),firstSplitAddClass=getBestAddClass(lap.splits[0],bestSplits[0].own,bestSplits[0].all),secondSplitAddClass=getBestAddClass(lap.splits[1],bestSplits[1].own,bestSplits[1].all),thirdSplitAddClass=getBestAddClass(lap.splits[2],bestSplits[2].own,bestSplits[2].all);lapTableHtml+=`<div class="lapTableLine${lap.isValidForBest?"":" noValidLap"}">\n                <div class="lap">${number+1}</div>\n                <div class="laptime ${laptimeAddClass}">${getTime(lap.laptime)}</div>\n                <div class="splits">\n                    <div class="laptime ${firstSplitAddClass}">${getTime(lap.splits[0])}</div>\n                    <div class="laptime ${secondSplitAddClass}">${getTime(lap.splits[1])}</div>\n                    <div class="laptime ${thirdSplitAddClass}">${getTime(lap.splits[2])}</div>\n                </div>\n            </div>`}),lapsElem.innerHTML=lapTableHtml.trim(),timetable.insertBefore(lapsElem,elem.nextElementSibling)}function getLapsByCar(laps,carId){return laps.filter(elem=>elem.carId===carId)}function getBestLapOfAllDrivers(laps){return Math.min(...laps.filter(lap=>lap.isValidForBest).map(lap=>lap.laptime))}function getBestAddClass(time,ownBest,allBest){return time===allBest?"bestLapAll":time===ownBest?"bestLap":""}function getAvgLapTime(laps){if(!laps.length)return null;laps[0].isValidForBest=!1;const lapTimesByDriver=laps.filter(lap=>lap.isValidForBest).map(lap=>lap.laptime);if(!lapTimesByDriver.length)return null;const avgLaptime=lapTimesByDriver.reduce((sum,val)=>sum+val,0)/lapTimesByDriver.length;return Math.round(avgLaptime)}function getBestSplits(lapsByCar,allLaps){const bestFirstSplitOwn=Math.min(...lapsByCar.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[0])),bestFirstSplitAll=Math.min(...allLaps.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[0])),bestSecondSplitOwn=Math.min(...lapsByCar.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[1])),bestSecondSplitAll=Math.min(...allLaps.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[1])),bestThirdSplitOwn=Math.min(...lapsByCar.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[2])),bestThirdSplitAll=Math.min(...allLaps.filter(lap=>lap.isValidForBest).map(lap=>lap.splits[2]));return[{own:bestFirstSplitOwn,all:bestFirstSplitAll},{own:bestSecondSplitOwn,all:bestSecondSplitAll},{own:bestThirdSplitOwn,all:bestThirdSplitAll}]}function getTime(total){if(!total||"number"!=typeof total)return"--:--.---";const millis=(total=parseInt(total))%1e3,seconds=(total-millis)/1e3%60,minutes=((total-millis)/1e3-seconds)/60%60;return`${pad(minutes,2)}:${pad(seconds,2)}.${pad(millis,3)}`}function pad(num,size){const s="0".repeat(size-1)+num;return s.substr(s.length-size)}resultElems.forEach((elem,index)=>{elem.addEventListener("click",ev=>renderTimetable(ev,elem,index))})})();